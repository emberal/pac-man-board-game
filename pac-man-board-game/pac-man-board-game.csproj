<Project Sdk="Microsoft.NET.Sdk.Web">

    <PropertyGroup>
        <TargetFramework>net8.0</TargetFramework>
        <Nullable>enable</Nullable>
        <TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>
        <TypeScriptToolsVersion>Latest</TypeScriptToolsVersion>
        <IsPackable>false</IsPackable>
        <SpaRoot>ClientApp\</SpaRoot>
        <DefaultItemExcludes>$(DefaultItemExcludes);$(SpaRoot)node_modules\**</DefaultItemExcludes>
        <SpaProxyServerUrl>https://localhost:3000</SpaProxyServerUrl>
        <SpaProxyLaunchCommand>pnpm dev</SpaProxyLaunchCommand>
        <RootNamespace>pacMan</RootNamespace>
        <ImplicitUsings>enable</ImplicitUsings>
        <DockerDefaultTargetOS>Linux</DockerDefaultTargetOS>
        <LangVersion>12</LangVersion>
    </PropertyGroup>

    <ItemGroup>
        <PackageReference Include="Microsoft.AspNetCore.SpaProxy" Version="8.0.0"/>
        <PackageReference Include="Microsoft.TypeScript.MSBuild" Version="5.3.2">
            <PrivateAssets>all</PrivateAssets>
            <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
        </PackageReference>
        <PackageReference Include="System.ServiceModel.Primitives" Version="6.2.0"/>
    </ItemGroup>

    <ItemGroup>
        <!-- Don't publish the SPA source files, but do show them in the project files list -->
        <Content Remove="$(SpaRoot)**"/>
        <Content Include="..\.dockerignore">
            <Link>.dockerignore</Link>
        </Content>
        <None Remove="$(SpaRoot)**"/>
        <None Include="$(SpaRoot)**" Exclude="$(SpaRoot)node_modules\**"/>
    </ItemGroup>

    <ItemGroup>
        <TypeScriptCompile Remove="ClientApp\src\components\Counter.tsx"/>
        <TypeScriptCompile Remove="ClientApp\src\components\FetchData.tsx"/>
        <TypeScriptCompile Remove="ClientApp\src\components\Home.tsx"/>
        <TypeScriptCompile Remove="ClientApp\src\pages\FetchData.tsx"/>
        <TypeScriptCompile Remove="ClientApp\src\classes\tileMap.ts"/>
        <TypeScriptCompile Remove="ClientApp\src\game\tileMap.ts"/>
        <TypeScriptCompile Remove="ClientApp\src\components\gameCanvas.tsx"/>
        <TypeScriptCompile Remove="ClientApp\src\game\game.ts"/>
        <TypeScriptCompile Remove="ClientApp\src\App.test.tsx"/>
        <TypeScriptCompile Remove="ClientApp\src\game\playerStats.tsx"/>
        <TypeScriptCompile Remove="ClientApp\src\websockets\actions.ts"/>
        <TypeScriptCompile Remove="ClientApp\src\utils\colours.ts"/>
        <TypeScriptCompile Remove="ClientApp\src\utils\dom.ts"/>
        <TypeScriptCompile Remove="ClientApp\src\game\pellet.ts"/>
    </ItemGroup>

    <ItemGroup>
        <Folder Include="ClientApp\tests\utils\"/>
    </ItemGroup>

    <ItemGroup>
        <ProjectReference Include="..\DataAccessLayer\DataAccessLayer.csproj"/>
    </ItemGroup>

    <Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules') ">
        <!-- Ensure Node.js is installed -->
        <Exec Command="node --version" ContinueOnError="true">
            <Output TaskParameter="ExitCode" PropertyName="ErrorCode"/>
        </Exec>
        <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE."/>
        <Message Importance="high" Text="Restoring dependencies using 'pnpm'. This may take several minutes..."/>
        <Exec WorkingDirectory="$(SpaRoot)" Command="pnpm install"/>
    </Target>

    <Target Name="PublishRunWebpack" AfterTargets="ComputeFilesToPublish">
        <!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
        <Exec WorkingDirectory="$(SpaRoot)" Command="pnpm install"/>
        <Exec WorkingDirectory="$(SpaRoot)" Command="pnpm build"/>

        <!-- Include the newly-built files in the publish output -->
        <ItemGroup>
            <DistFiles Include="$(SpaRoot)build\**"/>
            <ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
                <RelativePath>wwwroot\%(RecursiveDir)%(FileName)%(Extension)</RelativePath>
                <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
                <ExcludeFromSingleFile>true</ExcludeFromSingleFile>
            </ResolvedFileToPublish>
        </ItemGroup>
    </Target>
</Project>
